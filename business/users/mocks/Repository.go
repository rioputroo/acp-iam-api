package mocks

import (
	"acp-iam-api/api/iam/users/request"
	"acp-iam-api/business/roles"
	"acp-iam-api/business/users"
	"github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

func (_m *Repository) Login(email string, password string) (*users.Users, error) {
	panic("implement me")
}

func (_m *Repository) Register(email string, password string) (*users.UsersCreds, error) {
	panic("implement me")
}

func (_m *Repository) FindUserByEmail(email string) bool {
	panic("implement me")
}

func (_m *Repository) GetAllUsers() ([]users.Users, error) {
	ret := _m.Called()

	var r0 []users.Users
	if rf, ok := ret.Get(0).(func() []users.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) GetUsers(id uint) (*users.Users, *roles.Roles, error) {
	ret := _m.Called(id)

	var r0 *users.Users
	if rf, ok := ret.Get(0).(func(uint) *users.Users); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Users)
		}
	}

	var r1 *roles.Roles
	if rf, ok := ret.Get(1).(func(uint) *roles.Roles); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*roles.Roles)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

func (_m *Repository) AddUsers(request *request.InsertUsersRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) UpdateUsers(id uint, usersRequest *request.UpdateUsersRequest) error {
	ret := _m.Called(id, usersRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, interface{}) error); ok {
		r0 = rf(id, usersRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) DeleteUsers(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
